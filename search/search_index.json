{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"TIE MCP Server","text":"<p>Welcome to the Technique Inference Engine (TIE) MCP Server documentation.</p>"},{"location":"#overview","title":"Overview","text":"<p>The TIE MCP Server is a Model Context Protocol (MCP) server implementation that provides advanced MITRE ATT&amp;CK technique prediction and analysis capabilities. It leverages machine learning to predict likely attack techniques based on observed patterns.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Technique Prediction: Predict likely MITRE ATT&amp;CK techniques based on observed attack patterns</li> <li>Real-time Analysis: Process threat intelligence data in real-time</li> <li>Machine Learning: Advanced ML models for accurate predictions</li> <li>MCP Integration: Seamless integration with MCP-compatible clients</li> <li>Extensible Architecture: Modular design for easy customization</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To get started with the TIE MCP Server, see the Getting Started guide.</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The TIE MCP Server consists of several key components:</p> <ul> <li>MCP Server: Handles client communications and protocol implementation</li> <li>TIE Engine: Core machine learning engine for technique prediction</li> <li>Model Manager: Manages trained models and their lifecycle</li> <li>Database: Stores models, metrics, and metadata</li> <li>Monitoring: Tracks performance and system health</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For support and contributions, please see our Contributing Guide or visit our GitHub repository.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>The TIE MCP Server provides the following MCP tools and resources for technique prediction and analysis.</p>"},{"location":"api-reference/#tools","title":"Tools","text":""},{"location":"api-reference/#predict_techniques","title":"predict_techniques","text":"<p>Predict likely MITRE ATT&amp;CK techniques based on observed techniques.</p> <p>Parameters: - <code>techniques</code> (array): List of observed MITRE ATT&amp;CK technique IDs - <code>top_k</code> (integer, optional): Number of predictions to return (default: 10) - <code>include_threat_intel</code> (boolean, optional): Include real-time threat intelligence (default: true)</p> <p>Example: <pre><code>{\n  \"techniques\": [\"T1566.001\", \"T1204.002\"],\n  \"top_k\": 5,\n  \"include_threat_intel\": true\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"predicted_techniques\": [\n    {\n      \"technique_id\": \"T1055\",\n      \"technique_name\": \"Process Injection\",\n      \"score\": 0.85,\n      \"confidence\": \"high\"\n    }\n  ],\n  \"input_techniques\": [\"T1566.001\", \"T1204.002\"],\n  \"execution_time_seconds\": 0.1\n}\n</code></pre></p>"},{"location":"api-reference/#search_techniques","title":"search_techniques","text":"<p>Search for MITRE ATT&amp;CK techniques by name or description.</p> <p>Parameters: - <code>query</code> (string): Search query - <code>limit</code> (integer, optional): Maximum results (default: 10)</p> <p>Example: <pre><code>{\n  \"query\": \"phishing\",\n  \"limit\": 5\n}\n</code></pre></p>"},{"location":"api-reference/#get_technique_info","title":"get_technique_info","text":"<p>Get detailed information about a specific MITRE ATT&amp;CK technique.</p> <p>Parameters: - <code>technique_id</code> (string): MITRE ATT&amp;CK technique ID</p> <p>Example: <pre><code>{\n  \"technique_id\": \"T1566.001\"\n}\n</code></pre></p>"},{"location":"api-reference/#get_system_metrics","title":"get_system_metrics","text":"<p>Get real-time system metrics and threat intelligence status.</p> <p>Parameters: None</p> <p>Response: <pre><code>{\n  \"cpu_usage_percent\": 45.2,\n  \"memory_usage_percent\": 62.1,\n  \"active_models\": 3,\n  \"prediction_count\": 1247,\n  \"threat_feeds_status\": \"active\"\n}\n</code></pre></p>"},{"location":"api-reference/#resources","title":"Resources","text":""},{"location":"api-reference/#tiemodels","title":"tie://models","text":"<p>Access to enhanced TIE models with threat intelligence integration.</p>"},{"location":"api-reference/#tietechniques","title":"tie://techniques","text":"<p>Access to enhanced MITRE ATT&amp;CK techniques database.</p>"},{"location":"api-reference/#error-handling","title":"Error Handling","text":"<p>All API endpoints return standard HTTP status codes and error messages:</p> <ul> <li><code>200 OK</code>: Success</li> <li><code>400 Bad Request</code>: Invalid parameters</li> <li><code>404 Not Found</code>: Resource not found</li> <li><code>500 Internal Server Error</code>: Server error</li> </ul> <p>Error response format: ```json {   \"error\": \"Invalid technique ID\",   \"code\": \"INVALID_TECHNIQUE_ID\",   \"details\": {} }</p>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of using the TIE MCP Server.</p>"},{"location":"examples/#basic-technique-prediction","title":"Basic Technique Prediction","text":""},{"location":"examples/#example-1-simple-prediction","title":"Example 1: Simple Prediction","text":"<p>Predict techniques based on observed phishing activity:</p> <pre><code>import asyncio\nfrom mcp import ClientSession\nfrom mcp.client.stdio import stdio_client\n\nasync def predict_techniques():\n    async with stdio_client([\"tie-mcp-server\"]) as (read, write):\n        async with ClientSession(read, write) as session:\n            result = await session.call_tool(\n                \"predict_techniques\",\n                {\n                    \"techniques\": [\"T1566.001\", \"T1204.002\"],\n                    \"top_k\": 5\n                }\n            )\n            print(result)\n\nasyncio.run(predict_techniques())\n</code></pre>"},{"location":"examples/#example-2-advanced-prediction-with-threat-intel","title":"Example 2: Advanced Prediction with Threat Intel","text":"<pre><code>async def advanced_prediction():\n    async with stdio_client([\"tie-mcp-server\"]) as (read, write):\n        async with ClientSession(read, write) as session:\n            result = await session.call_tool(\n                \"predict_techniques\",\n                {\n                    \"techniques\": [\"T1059.001\", \"T1055\", \"T1082\"],\n                    \"top_k\": 10,\n                    \"include_threat_intel\": True,\n                    \"include_reasoning\": True\n                }\n            )\n\n            for prediction in result[\"predicted_techniques\"]:\n                print(f\"Technique: {prediction['technique_name']}\")\n                print(f\"Score: {prediction['score']:.2f}\")\n                print(f\"Reasoning: {prediction.get('reasoning', 'N/A')}\")\n                print(\"---\")\n\nasyncio.run(advanced_prediction())\n</code></pre>"},{"location":"examples/#technique-search","title":"Technique Search","text":""},{"location":"examples/#example-3-search-for-techniques","title":"Example 3: Search for Techniques","text":"<pre><code>async def search_techniques():\n    async with stdio_client([\"tie-mcp-server\"]) as (read, write):\n        async with ClientSession(read, write) as session:\n            result = await session.call_tool(\n                \"search_techniques\",\n                {\n                    \"query\": \"lateral movement\",\n                    \"limit\": 5\n                }\n            )\n\n            for technique in result[\"techniques\"]:\n                print(f\"{technique['id']}: {technique['name']}\")\n                print(f\"Description: {technique['description'][:100]}...\")\n                print(\"---\")\n\nasyncio.run(search_techniques())\n</code></pre>"},{"location":"examples/#system-monitoring","title":"System Monitoring","text":""},{"location":"examples/#example-4-get-system-metrics","title":"Example 4: Get System Metrics","text":"<pre><code>async def get_metrics():\n    async with stdio_client([\"tie-mcp-server\"]) as (read, write):\n        async with ClientSession(read, write) as session:\n            result = await session.call_tool(\"get_system_metrics\", {})\n\n            print(f\"CPU Usage: {result['cpu_usage_percent']:.1f}%\")\n            print(f\"Memory Usage: {result['memory_usage_percent']:.1f}%\")\n            print(f\"Active Models: {result['active_models']}\")\n            print(f\"Total Predictions: {result['prediction_count']}\")\n\nasyncio.run(get_metrics())\n</code></pre>"},{"location":"examples/#working-with-resources","title":"Working with Resources","text":""},{"location":"examples/#example-5-access-model-information","title":"Example 5: Access Model Information","text":"<pre><code>async def get_models():\n    async with stdio_client([\"tie-mcp-server\"]) as (read, write):\n        async with ClientSession(read, write) as session:\n            models = await session.read_resource(\"tie://models\")\n\n            for model in models[\"models\"]:\n                print(f\"Model: {model['name']}\")\n                print(f\"Type: {model['type']}\")\n                print(f\"Accuracy: {model['metrics']['accuracy']:.2f}\")\n                print(\"---\")\n\nasyncio.run(get_models())\n</code></pre>"},{"location":"examples/#batch-processing","title":"Batch Processing","text":""},{"location":"examples/#example-6-process-multiple-threat-reports","title":"Example 6: Process Multiple Threat Reports","text":"<pre><code>async def process_threat_reports():\n    reports = [\n        {\"id\": \"report1\", \"techniques\": [\"T1566.001\", \"T1204.002\"]},\n        {\"id\": \"report2\", \"techniques\": [\"T1059.003\", \"T1053.005\"]},\n        {\"id\": \"report3\", \"techniques\": [\"T1055\", \"T1082\", \"T1105\"]}\n    ]\n\n    async with stdio_client([\"tie-mcp-server\"]) as (read, write):\n        async with ClientSession(read, write) as session:\n            results = []\n\n            for report in reports:\n                prediction = await session.call_tool(\n                    \"predict_techniques\",\n                    {\n                        \"techniques\": report[\"techniques\"],\n                        \"top_k\": 3\n                    }\n                )\n\n                results.append({\n                    \"report_id\": report[\"id\"],\n                    \"input_techniques\": report[\"techniques\"],\n                    \"predictions\": prediction[\"predicted_techniques\"]\n                })\n\n            # Analyze results\n            for result in results:\n                print(f\"Report {result['report_id']}:\")\n                print(f\"  Input: {result['input_techniques']}\")\n                print(\"  Top Predictions:\")\n                for pred in result['predictions'][:3]:\n                    print(f\"    {pred['technique_id']}: {pred['score']:.2f}\")\n                print()\n\nasyncio.run(process_threat_reports())\n</code></pre>"},{"location":"examples/#error-handling","title":"Error Handling","text":""},{"location":"examples/#example-7-robust-error-handling","title":"Example 7: Robust Error Handling","text":"<pre><code>async def robust_prediction():\n    async with stdio_client([\"tie-mcp-server\"]) as (read, write):\n        async with ClientSession(read, write) as session:\n            try:\n                result = await session.call_tool(\n                    \"predict_techniques\",\n                    {\n                        \"techniques\": [\"T1566.001\", \"INVALID_ID\"],\n                        \"top_k\": 5\n                    }\n                )\n                print(\"Success:\", result)\n\n            except Exception as e:\n                print(f\"Error occurred: {e}\")\n\n                # Try with valid techniques only\n                result = await session.call_tool(\n                    \"predict_techniques\",\n                    {\n                        \"techniques\": [\"T1566.001\"],\n                        \"top_k\": 5\n                    }\n                )\n                print(\"Fallback result:\", result)\n\nasyncio.run(robust_prediction())\n</code></pre>"},{"location":"examples/#integration-with-other-tools","title":"Integration with Other Tools","text":""},{"location":"examples/#example-8-claude-desktop-integration","title":"Example 8: Claude Desktop Integration","text":"<p>Configure the TIE MCP Server in Claude Desktop by adding to your <code>claude_desktop_config.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"tie-mcp-server\": {\n      \"command\": \"tie-mcp-server\",\n      \"args\": [],\n      \"env\": {\n        \"LOG_LEVEL\": \"INFO\"\n      }\n    }\n  }\n}\n</code></pre> <p>Then use it in conversations:</p> <p>``` @tie-mcp-server Can you predict likely next techniques after observing T1566.001 and T1204.002?</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you set up and run the TIE MCP Server.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10 or higher</li> <li>Poetry (for dependency management)</li> <li>Git</li> </ul>"},{"location":"getting-started/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/Nidhi2302/TIE-mcp-server.git\ncd TIE-mcp-server\n</code></pre></p> </li> <li> <p>Install dependencies with Poetry: <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Set up environment variables: <pre><code>cp mcp_config.example.json mcp_config.json\n# Edit mcp_config.json with your configuration\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>The server can be configured using environment variables or a configuration file:</p> <ul> <li><code>DATABASE_URL</code>: Database connection string</li> <li><code>REDIS_URL</code>: Redis connection string (optional)</li> <li><code>LOG_LEVEL</code>: Logging level (DEBUG, INFO, WARNING, ERROR)</li> </ul>"},{"location":"getting-started/#running-the-server","title":"Running the Server","text":""},{"location":"getting-started/#development-mode","title":"Development Mode","text":"<pre><code>poetry run tie-mcp-server\n</code></pre>"},{"location":"getting-started/#production-mode","title":"Production Mode","text":"<pre><code>poetry run tie-mcp-server --environment production\n</code></pre>"},{"location":"getting-started/#using-docker","title":"Using Docker","text":"<pre><code>docker-compose up -d\n</code></pre>"},{"location":"getting-started/#first-steps","title":"First Steps","text":"<ol> <li> <p>Test the connection: <pre><code># The server will be available for MCP clients to connect to\n</code></pre></p> </li> <li> <p>Load sample data: <pre><code>poetry run python -m tie_mcp.cli load-sample-data\n</code></pre></p> </li> <li> <p>Train a model: <pre><code>poetry run python -m tie_mcp.cli train-model --dataset sample_data.json\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>See the API Reference for detailed API documentation</li> <li>Check out Examples for usage examples</li> <li>Read about Contributing to the project</li> </ul>"}]}