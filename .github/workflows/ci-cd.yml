name: TIE MCP Server CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tie_mcp_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
    
    - name: Install project
      run: poetry install --no-interaction
    
    - name: Lint with ruff
      run: |
        poetry run ruff check src/ tests/
        poetry run ruff format --check src/ tests/
    
    - name: Type check with mypy
      run: |
        poetry run mypy src/
    
    - name: Security check with bandit
      run: |
        poetry run pip install bandit
        poetry run bandit -r src/
    
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tie_mcp_test
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
      run: |
        poetry run pytest tests/ -v --cov=tie_mcp --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    # Removed environment reference until environments are configured in repository settings

    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
        # TODO: Add your staging deployment script here
        # This could be a script that:
        # - Updates your staging Kubernetes deployment
        # - Runs docker-compose up with staging configuration
        # - Calls your cloud provider's deployment API
        #
        # Example for Kubernetes:
        # kubectl set image deployment/tie-mcp-staging tie-mcp=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
        #
        # Example for Docker Compose:
        # docker-compose -f docker-compose.staging.yml pull
        # docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    # Removed environment reference until environments are configured in repository settings

    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main"
        # TODO: Add your production deployment script here
        #
        # Example for Kubernetes:
        # kubectl set image deployment/tie-mcp-prod tie-mcp=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
        #
        # Example for Docker Compose:
        # docker-compose -f docker-compose.prod.yml pull
        # docker-compose -f docker-compose.prod.yml up -d

  performance-tests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: tie_mcp_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
    
    - name: Install dependencies
      run: poetry install --no-interaction
    
    - name: Run performance tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/tie_mcp_perf
        REDIS_URL: redis://localhost:6379
        ENVIRONMENT: testing
      run: |
        poetry run pytest tests/performance/ -v --tb=short
    
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results-${{ github.run_id }}
        path: tests/performance/results/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction
        poetry run pip install mkdocs mkdocs-material mkdocstrings[python]
    
    - name: Build documentation
      run: |
        poetry run mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        # Use GH_TOKEN if available, fallback to GITHUB_TOKEN
        github_token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        publish_dir: ./site
        force_orphan: true
        enable_jekyll: false
        
    # Alternative manual deployment method (commented out)
    # Uncomment this section if you prefer manual git operations
    # - name: Manual GitHub Pages deployment
    #   run: |
    #     cd ./site
    #     git init
    #     git config user.name "GitHub Actions"
    #     git config user.email "actions@github.com"
    #     git add .
    #     git commit -m "Deploy documentation to GitHub Pages"
    #     git remote add origin https://x-access-token:${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
    #     git push origin --force gh-pages

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [test, build-and-push, deploy-staging, deploy-production, performance-tests, security-scan, docs]
    
    permissions:
      packages: write
    
    steps:
    - name: Cleanup old packages
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ env.IMAGE_NAME }}
        package-type: container
        min-versions-to-keep: 10
        delete-only-untagged-versions: true
      continue-on-error: true